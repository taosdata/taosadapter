name: GO_LINUX

on:
  pull_request:
    branches:
      - 'main'
      - '3.0'
      - '3.1'
      - '3.1.2'
      - '3.3.6'
  push:
    branches:
      - 'main'
      - '3.0'
      - '3.1'
      - '3.1.2'
      - '3.3.6'
  workflow_dispatch:
    inputs:
      tbBranch:
        description: 'TDengine branch'
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: Build-${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' , 'ubuntu-24.04-arm' ]
    outputs:
      commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
    steps:
      - name: checkout TDengine by pr
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: ${{ github.base_ref }}

      - name: checkout TDengine by push
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: ${{ github.ref_name }}

      - name: checkout TDengine manually
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          repository: 'taosdata/TDengine'
          path: 'TDengine'
          ref: ${{ inputs.tbBranch }}

      - name: get_commit_id
        id: get_commit_id
        run: |
          cd TDengine
          echo "commit_id=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Cache server by pr
        if: github.event_name == 'pull_request'
        id: cache-server-pr
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.base_ref }}-${{ steps.get_commit_id.outputs.commit_id }}

      - name: Cache server by push
        if: github.event_name == 'push'
        id: cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.ref_name }}-${{ steps.get_commit_id.outputs.commit_id }}

      - name: Cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ inputs.tbBranch }}-${{ steps.get_commit_id.outputs.commit_id }}


      - name: install TDengine
        if: >
          (github.event_name == 'workflow_dispatch' && steps.cache-server-manually.outputs.cache-hit != 'true') ||
          (github.event_name == 'pull_request' && steps.cache-server-pr.outputs.cache-hit != 'true') ||
          (github.event_name == 'push' && steps.cache-server-push.outputs.cache-hit != 'true')
        run: |
          cd TDengine
          mkdir debug
          cd debug
          cmake .. -DBUILD_TEST=off -DBUILD_DEPENDENCY_TESTS=0 -DVERNUMBER=3.9.9.9
          make -j 4

      - name: package
        if: >
          (github.event_name == 'workflow_dispatch' && steps.cache-server-manually.outputs.cache-hit != 'true') ||
          (github.event_name == 'pull_request' && steps.cache-server-pr.outputs.cache-hit != 'true') ||
          (github.event_name == 'push' && steps.cache-server-push.outputs.cache-hit != 'true')
        run: |
          mkdir -p ./release
          cp ./TDengine/debug/build/bin/taos ./release/
          cp ./TDengine/debug/build/bin/taosd ./release/
          cp ./TDengine/debug/build/lib/libtaosnative.so.3.9.9.9 ./release/
          cp ./TDengine/include/client/taos.h ./release/
          cat >./release/install.sh<<EOF 
          chmod +x ./taos
          chmod +x ./taosd
          cp ./taos /bin/
          cp ./taosd /bin/
          cp ./libtaosnative.so.3.9.9.9 /usr/lib
          ln -sf /usr/lib/libtaosnative.so.3.9.9.9 /usr/lib/libtaosnative.so.1
          ln -sf /usr/lib/libtaosnative.so.1 /usr/lib/libtaosnative.so
          cp ./taos.h /usr/include
          EOF
          tar -zcvf server.tar.gz ./release

  test_build:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        go: [ '1.17', 'stable' ]
        os: [ 'ubuntu-latest' , 'ubuntu-24.04-arm' ]
    name: Build taosAdapter ${{ matrix.os }}-${{ matrix.go }}
    steps:
      - name: get cache server by pr
        if: github.event_name == 'pull_request'
        id: get-cache-server-pr
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.base_ref }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.base_ref }}-

      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.ref_name }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.ref_name }}-

      - name: cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4
        with:
          path: 'taosadapter'

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          cache-dependency-path: taosadapter/go.sum

      - name: build taosAdapter
        run: cd ./taosadapter && go build

  test_go_test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        go: [ '1.17', 'stable' ]
        os: [ 'ubuntu-latest' , 'ubuntu-24.04-arm' ]
    name: test taosAdapter ${{ matrix.os }}-${{ matrix.go }}
    steps:
      - name: get cache server by pr
        if: github.event_name == 'pull_request'
        id: get-cache-server-pr
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.base_ref }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.base_ref }}-

      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.ref_name }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.ref_name }}-

      - name: get cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          cache-dependency-path: go.sum

      - name: start shell
        run: |
          cat >start.sh<<EOF
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: start taosd
        run: nohup sudo sh ./start.sh & disown

      - name: test
        id: test
        run: sudo go test -v --count=1 -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4-beta
        with:
          files: ./coverage.txt
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_ORG_TOKEN }}

      - uses: actions/upload-artifact@v4
        if: always() && (steps.test.outcome == 'failure' || steps.test.outcome == 'cancelled')
        with:
          name: ${{ matrix.os }}-${{ matrix.go }}-log
          path: /var/log/taos/

  golangci:
    name: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'ubuntu-latest' , 'ubuntu-24.04-arm' ]
    needs: build
    steps:
      - name: get cache server by pr
        if: github.event_name == 'pull_request'
        id: get-cache-server-pr
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.base_ref }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.base_ref }}-

      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.ref_name }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.ref_name }}-

      - name: get cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest

  test_go_asan:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        go: [ 'stable' ]
        os: [ 'ubuntu-latest' , 'ubuntu-24.04-arm' ]
    name: test taosAdapter with asan ${{ matrix.os }}-${{ matrix.go }}
    steps:
      - name: get cache server by pr
        if: github.event_name == 'pull_request'
        id: get-cache-server-pr
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.base_ref }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.base_ref }}-

      - name: get cache server by push
        if: github.event_name == 'push'
        id: get-cache-server-push
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ github.ref_name }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ github.ref_name }}-

      - name: get cache server manually
        if: github.event_name == 'workflow_dispatch'
        id: get-cache-server-manually
        uses: actions/cache@v4
        with:
          path: server.tar.gz
          key: ${{ matrix.os }}-build-${{ inputs.tbBranch }}-${{ needs.build.outputs.commit_id }}
          restore-keys: |
            ${{ matrix.os }}-build-${{ inputs.tbBranch }}-


      - name: install
        run: |
          tar -zxvf server.tar.gz
          cd release && sudo sh install.sh

      - name: checkout
        uses: actions/checkout@v4

      - name: copy taos cfg
        run: |
          sudo mkdir -p /etc/taos
          sudo cp ./.github/workflows/taos.cfg /etc/taos/taos.cfg

      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          cache-dependency-path: go.sum

      - name: start shell
        run: |
          cat >start.sh<<EOF
          ulimit -n 65535 && TAOS_SUPPORT_VNODES=256 taosd
          EOF

      - name: start taosd
        run: nohup sudo sh ./start.sh & disown

      - name: test
        id: test
        run: sudo go test -v --count=1 -asan ./...
