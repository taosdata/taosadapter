package parseblock

import (
	"database/sql/driver"
	"math"
	"reflect"
	"testing"
	"time"

	"github.com/taosdata/taosadapter/v3/driver/common"
)

func TestParseBlock(t *testing.T) {
	type args struct {
		data      []byte
		colTypes  []uint8
		rows      int
		precision int
	}
	tests := []struct {
		name  string
		args  args
		want  uint64
		want1 [][]driver.Value
	}{
		{
			name: "raw",
			args: args{
				data: []byte{
					0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x08, 0x00, 0x00,
					0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00,
					0x04, 0x04, 0x00, 0x00, 0x00, 0x05, 0x08, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x00, 0x0c,
					0x02, 0x00, 0x00, 0x00, 0x0d, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x08, 0x00, 0x00, 0x00, 0x06, 0x04,
					0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x08, 0x16, 0x00, 0x00, 0x00, 0x0a, 0x52, 0x00,
					0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00,
					0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00,
					0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x18, 0x00,
					0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x5b, 0x70, 0x86, 0x82,
					0x01, 0x00, 0x00, 0x14, 0x5f, 0x70, 0x86, 0x82, 0x01, 0x00, 0x00, 0xfc, 0x62, 0x70, 0x86, 0x82,
					0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x20, 0x02, 0x16, 0x00, 0x20, 0x03, 0x00, 0x21, 0x00,
					0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
					0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x06, 0x42, 0x00, 0x20, 0x07, 0x00, 0x4d,
					0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x20, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x20, 0x41, 0x00, 0x80,
					0x7c, 0x44, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x40, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x5c, 0x91, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x62, 0x69, 0x6e,
					0x61, 0x72, 0x79, 0x07, 0x00, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x32, 0x00, 0x00, 0x00, 0x00,
					0x16, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x14, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x63, 0x00,
					0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x18, 0x00,
					0x6e, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00,
					0x72, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00,
				},
				colTypes: []uint8{
					common.TSDB_DATA_TYPE_TIMESTAMP,
					common.TSDB_DATA_TYPE_BOOL,
					common.TSDB_DATA_TYPE_TINYINT,
					common.TSDB_DATA_TYPE_SMALLINT,
					common.TSDB_DATA_TYPE_INT,
					common.TSDB_DATA_TYPE_BIGINT,
					common.TSDB_DATA_TYPE_UTINYINT,
					common.TSDB_DATA_TYPE_USMALLINT,
					common.TSDB_DATA_TYPE_UINT,
					common.TSDB_DATA_TYPE_UBIGINT,
					common.TSDB_DATA_TYPE_FLOAT,
					common.TSDB_DATA_TYPE_DOUBLE,
					common.TSDB_DATA_TYPE_BINARY,
					common.TSDB_DATA_TYPE_NCHAR,
				},
				rows:      3,
				precision: 0,
			},
			want: 1,
			want1: [][]driver.Value{
				{time.Unix(0, 1660112886572*1e6).Local(), true, int8(2), int16(3), int32(4), int64(5), uint8(6), uint16(7), uint32(8), uint64(9), float32(10), float64(11), "binary", "nchar"},
				{time.Unix(0, 1660112887572*1e6).Local(), false, int8(22), int16(33), int32(44), int64(55), uint8(66), uint16(77), uint32(88), uint64(99), float32(1010), float64(1111), "binary2", "nchar2"},
				{time.Unix(0, 1660112888572*1e6).Local(), nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, got1, err := ParseBlock(tt.args.data, tt.args.colTypes, tt.args.rows, tt.args.precision)
			if err != nil {
				t.Errorf("ParseBlock() err = %v", err)
			}
			if got != tt.want {
				t.Errorf("ParseBlock() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("ParseBlock() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestParseTmqBlock(t *testing.T) {
	type args struct {
		data      []byte
		colTypes  []uint8
		rows      int
		precision int
	}
	tests := []struct {
		name      string
		args      args
		id        uint64
		messageID uint64
		want1     [][]driver.Value
	}{
		{
			name: "1",
			args: args{
				data: []byte{
					0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x08, 0x00, 0x00,
					0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0xe7,
					0x43, 0x9e, 0x86, 0x82, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
				},
				colTypes:  []uint8{common.TSDB_DATA_TYPE_TIMESTAMP, common.TSDB_DATA_TYPE_INT},
				rows:      1,
				precision: 0,
			},
			id:        2,
			messageID: 1,
			want1: [][]driver.Value{
				{time.Unix(0, 1660115895271*1e6).Local(), int32(1)},
			},
		},
		{
			name: "2",
			args: args{
				data: []byte{
					0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00, //version
					0xf8, 0x00, 0x00, 0x00, //length
					0x01, 0x00, 0x00, 0x00, //rows
					0x0e, 0x00, 0x00, 0x00, //columns
					0xff, 0xff, 0xff, 0xff, //flagSegment
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //groupID
					//types
					0x09, 0x08, 0x00, 0x00, 0x00, //1
					0x01, 0x01, 0x00, 0x00, 0x00, //2
					0x02, 0x01, 0x00, 0x00, 0x00, //3
					0x03, 0x02, 0x00, 0x00, 0x00, //4
					0x04, 0x04, 0x00, 0x00, 0x00, //5
					0x05, 0x08, 0x00, 0x00, 0x00, //6
					0x0b, 0x01, 0x00, 0x00, 0x00, //7
					0x0c, 0x02, 0x00, 0x00, 0x00, //8
					0x0d, 0x04, 0x00, 0x00, 0x00, //9
					0x0e, 0x08, 0x00, 0x00, 0x00, //10
					0x06, 0x04, 0x00, 0x00, 0x00, //11
					0x07, 0x08, 0x00, 0x00, 0x00, //12
					0x08, 0x00, 0x00, 0x00, 0x00, //13
					0x0a, 0x00, 0x00, 0x00, 0x00, //14
					//lengths
					0x08, 0x00, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00,
					0x08, 0x00, 0x00, 0x00,
					0x01, 0x00, 0x00, 0x00,
					0x02, 0x00, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00,
					0x08, 0x00, 0x00, 0x00,
					0x04, 0x00, 0x00, 0x00,
					0x08, 0x00, 0x00, 0x00,
					0x05, 0x00, 0x00, 0x00,
					0x12, 0x00, 0x00, 0x00,
					0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //ts
					0x00,
					0x01, //bool
					0x00,
					0x7f, //i8
					0x00,
					0xff, 0x7f, //i16
					0x00,
					0xff, 0xff, 0xff, 0x7f, //i32
					0x00,
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, //i64
					0x00,
					0xff, //u8
					0x00,
					0xff, 0xff, //u16
					0x00,
					0xff, 0xff, 0xff, 0xff, //u32
					0x00,
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, //u64
					0x00,
					0xff, 0xff, 0x7f, 0x7f, //f32
					0x00,
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f, //f64
					0x00, 0x00, 0x00, 0x00,
					0x03, 0x00, //binary
					0x41, 0x42, 0x43,
					0x00, 0x00, 0x00, 0x00,
					0x10, 0x00, //nchar
					0x9b, 0x6d, 0x00, 0x00, 0x1d, 0x60, 0x00, 0x00, 0x70, 0x65, 0x00, 0x00, 0x6e, 0x63, 0x00, 0x00,
				},
				colTypes: []uint8{
					common.TSDB_DATA_TYPE_TIMESTAMP,
					common.TSDB_DATA_TYPE_BOOL,
					common.TSDB_DATA_TYPE_TINYINT,
					common.TSDB_DATA_TYPE_SMALLINT,
					common.TSDB_DATA_TYPE_INT,
					common.TSDB_DATA_TYPE_BIGINT,
					common.TSDB_DATA_TYPE_UTINYINT,
					common.TSDB_DATA_TYPE_USMALLINT,
					common.TSDB_DATA_TYPE_UINT,
					common.TSDB_DATA_TYPE_UBIGINT,
					common.TSDB_DATA_TYPE_FLOAT,
					common.TSDB_DATA_TYPE_DOUBLE,
					common.TSDB_DATA_TYPE_BINARY,
					common.TSDB_DATA_TYPE_NCHAR,
				},
				rows:      1,
				precision: 0,
			},
			id:        1,
			messageID: 2,
			want1: [][]driver.Value{
				//true 127 32767 2147483647 9223372036854775807 255 65535 4294967295 18446744073709551615 3.4028235e+38 1.7976931348623157e+308 ABC 涛思数据
				{time.Unix(0, 0).Local(),
					true,
					int8(127),
					int16(32767),
					int32(2147483647),
					int64(9223372036854775807),
					uint8(255),
					uint16(65535),
					uint32(4294967295),
					uint64(18446744073709551615),
					float32(math.MaxFloat32),
					float64(math.MaxFloat64),
					"ABC",
					"涛思数据",
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			id, messageID, result, err := ParseTmqBlock(tt.args.data, tt.args.colTypes, tt.args.rows, tt.args.precision)
			if err != nil {
				t.Errorf("ParseTmqBlock() err = %v", err)
			}
			if id != tt.id {
				t.Errorf("ParseTmqBlock() id = %v, want %v", id, tt.id)
			}
			if messageID != tt.messageID {
				t.Errorf("ParseTmqBlock() messageID = %v, want %v", messageID, tt.messageID)
			}
			if !reflect.DeepEqual(result, tt.want1) {
				t.Errorf("ParseBlock() result = %v, want %v", result, tt.want1)
			}
		})
	}
}
